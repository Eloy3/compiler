
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front_end.parser;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import front_end.simbols.*;
import front_end.scanner.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\032\012\000\002\043" +
    "\002\000\002\044\002\000\002\006\004\000\002\007\003" +
    "\000\002\007\002\000\002\005\005\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\012\013\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\017\007" +
    "\000\002\017\002\000\002\020\004\000\002\020\002\000" +
    "\002\026\003\000\002\026\002\000\002\021\004\000\002" +
    "\022\003\000\002\022\002\000\002\025\005\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\004\000\002\025\004\000\002\031\005\000" +
    "\002\011\005\000\002\014\004\000\002\014\002\000\002" +
    "\015\005\000\002\015\005\000\002\003\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\045\006\000\002\045\006\000\002\047\003\000" +
    "\002\047\005\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\046\006\000\002\033\016\000\002\036" +
    "\005\000\002\036\003\000\002\034\010\000\002\034\002" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\024\016\000\002\024\022\000\002" +
    "\023\005\000\002\023\005\000\002\023\002\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\013\003" +
    "\000\002\013\003\000\002\037\002\000\002\040\002\000" +
    "\002\041\002\000\002\042\002\000\002\051\002\000\002" +
    "\052\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\043\uffff\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\010\001\002\000\004\011\011\001\002\000" +
    "\004\016\ufffe\001\002\000\004\016\013\001\002\000\030" +
    "\023\027\024\uffea\025\uffea\026\033\030\022\037\uffb5\040" +
    "\uffb5\041\032\044\026\045\017\046\021\001\002\000\006" +
    "\024\111\025\114\001\002\000\032\017\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\030\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\001\002\000\004\013\240\001" +
    "\002\000\004\010\235\001\002\000\032\017\ufffb\023\027" +
    "\024\uffea\025\uffea\026\033\030\022\037\uffb5\040\uffb5\041" +
    "\032\044\026\045\017\046\021\001\002\000\004\010\230" +
    "\001\002\000\010\024\207\025\211\032\210\001\002\000" +
    "\006\037\147\040\150\001\002\000\032\017\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\030\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002\000\004\017\146" +
    "\001\002\000\004\010\135\001\002\000\004\012\124\001" +
    "\002\000\004\013\123\001\002\000\004\013\122\001\002" +
    "\000\004\010\uffb9\001\002\000\006\024\uffeb\025\uffeb\001" +
    "\002\000\032\017\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\030\ufff6\037\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\001\002\000\004\010\036\001\002\000\010\014\043" +
    "\015\041\023\037\001\002\000\016\011\uffca\013\uffca\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\001\002\000\004\011\053" +
    "\001\002\000\030\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\013\uffbc\020\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\001\002\000\012\033\046\034\047\035\045\036\050\001" +
    "\002\000\030\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd" +
    "\013\uffbd\020\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\001" +
    "\002\000\010\014\043\015\041\023\051\001\002\000\010" +
    "\014\uffc7\015\uffc7\023\uffc7\001\002\000\010\014\uffc5\015" +
    "\uffc5\023\uffc5\001\002\000\010\014\uffc4\015\uffc4\023\uffc4" +
    "\001\002\000\010\014\uffc6\015\uffc6\023\uffc6\001\002\000" +
    "\020\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\020\uffbe\001\002\000\006\011\uffcb\013\uffcb\001\002\000" +
    "\004\016\054\001\002\000\030\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\031\uffb8\037\uffb8\040\uffb8\041\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\001\002\000\030\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\031\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\001\002\000\030\023\027\024\uffea\025\uffea" +
    "\026\033\031\063\037\uffb5\040\uffb5\041\032\044\026\045" +
    "\017\046\021\001\002\000\006\024\111\025\114\001\002" +
    "\000\032\017\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\031" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\001\002\000\004\013\110\001\002\000\032\017\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\031\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\010\014" +
    "\043\015\041\023\051\001\002\000\032\017\uffe7\023\027" +
    "\024\uffea\025\uffea\026\033\031\063\037\uffb5\040\uffb5\041" +
    "\032\044\026\045\017\046\021\001\002\000\032\017\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\031\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\044\uffe4\045\uffe4\046\uffe4\001\002\000\004" +
    "\017\uffb6\001\002\000\004\013\072\001\002\000\004\013" +
    "\071\001\002\000\032\017\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\031\uffe0\037\uffe0\040\uffe0\041\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\001\002\000\032\017\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\031\uffe5\037\uffe5\040\uffe5\041\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\001\002\000\004\017\074\001\002" +
    "\000\036\017\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030" +
    "\uffc8\031\uffc8\037\uffc8\040\uffc8\041\uffc8\042\076\044\uffc8" +
    "\045\uffc8\046\uffc8\001\002\000\034\017\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\044\uffcc\045\uffcc\046\uffcc\001\002\000\004\016" +
    "\077\001\002\000\030\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\031\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\001\002\000\030\023\027\024\uffea\025\uffea\026\033" +
    "\031\063\037\uffb5\040\uffb5\041\032\044\026\045\017\046" +
    "\021\001\002\000\004\017\uffb6\001\002\000\004\017\103" +
    "\001\002\000\034\017\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\030\uffc9\031\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\001\002\000\004\017\uffe8\001\002\000" +
    "\004\017\uffe9\001\002\000\004\013\107\001\002\000\032" +
    "\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\031\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002" +
    "\000\032\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\001\002\000\004\023\uffbb\001\002\000\004\013\121\001" +
    "\002\000\004\023\115\001\002\000\004\023\uffba\001\002" +
    "\000\006\012\117\013\uffdc\001\002\000\004\013\uffde\001" +
    "\002\000\010\014\043\015\041\023\051\001\002\000\004" +
    "\013\uffdd\001\002\000\032\017\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\031\uffe6\037\uffe6\040\uffe6\041\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\001\002\000\032\017\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\030\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\001\002\000\032\017\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002\000\010\014" +
    "\043\015\041\023\051\001\002\000\004\013\uffda\001\002" +
    "\000\014\004\132\005\127\006\131\007\133\013\uffdb\001" +
    "\002\000\010\014\uffd7\015\uffd7\023\uffd7\001\002\000\010" +
    "\014\043\015\041\023\051\001\002\000\010\014\uffd6\015" +
    "\uffd6\023\uffd6\001\002\000\010\014\uffd8\015\uffd8\023\uffd8" +
    "\001\002\000\010\014\uffd5\015\uffd5\023\uffd5\001\002\000" +
    "\004\013\uffd9\001\002\000\010\014\142\015\141\023\136" +
    "\001\002\000\006\011\uffd0\020\uffd0\001\002\000\006\011" +
    "\uffd2\020\144\001\002\000\004\011\143\001\002\000\006" +
    "\011\uffce\020\uffce\001\002\000\006\011\uffcf\020\uffcf\001" +
    "\002\000\004\013\uffd4\001\002\000\010\014\142\015\141" +
    "\023\136\001\002\000\004\011\uffd1\001\002\000\004\002" +
    "\000\001\002\000\004\010\uffb9\001\002\000\004\010\151" +
    "\001\002\000\006\024\uffb7\025\uffb7\001\002\000\006\024" +
    "\111\025\114\001\002\000\004\013\154\001\002\000\010" +
    "\014\uffb9\015\uffb9\023\uffb9\001\002\000\010\014\043\015" +
    "\041\023\037\001\002\000\004\013\uffb8\001\002\000\004" +
    "\013\160\001\002\000\006\011\uffbf\023\161\001\002\000" +
    "\006\004\171\005\170\001\002\000\004\011\163\001\002" +
    "\000\004\016\164\001\002\000\030\023\027\024\uffea\025" +
    "\uffea\026\033\031\063\037\uffb5\040\uffb5\041\032\044\026" +
    "\045\017\046\021\001\002\000\004\017\uffb4\001\002\000" +
    "\004\017\167\001\002\000\034\017\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\030\uffc2\031\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\004\005\173" +
    "\001\002\000\004\004\172\001\002\000\004\011\uffc1\001" +
    "\002\000\004\011\uffc0\001\002\000\004\010\175\001\002" +
    "\000\010\014\043\015\041\023\037\001\002\000\004\011" +
    "\177\001\002\000\004\016\200\001\002\000\030\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\031\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\001\002\000\030\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\031\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\001\002\000\030\023\027" +
    "\024\uffea\025\uffea\026\033\031\063\037\uffb5\040\uffb5\041" +
    "\032\044\026\045\017\046\021\001\002\000\004\017\uffb4" +
    "\001\002\000\004\017\205\001\002\000\034\017\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\044\uffc3\045\uffc3\046\uffc3\001\002\000" +
    "\004\023\212\001\002\000\004\023\ufff2\001\002\000\004" +
    "\023\ufff0\001\002\000\004\023\ufff1\001\002\000\004\010" +
    "\213\001\002\000\010\011\uffee\024\111\025\114\001\002" +
    "\000\004\023\222\001\002\000\004\011\216\001\002\000" +
    "\004\016\217\001\002\000\030\023\027\024\uffea\025\uffea" +
    "\026\033\031\063\037\uffb5\040\uffb5\041\032\044\026\045" +
    "\017\046\021\001\002\000\004\017\221\001\002\000\032" +
    "\017\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\046\ufff3\001\002" +
    "\000\004\012\223\001\002\000\010\014\043\015\041\023" +
    "\051\001\002\000\006\011\uffec\020\225\001\002\000\010" +
    "\011\uffee\024\111\025\114\001\002\000\004\011\uffef\001" +
    "\002\000\004\011\uffed\001\002\000\004\023\231\001\002" +
    "\000\004\011\232\001\002\000\004\013\uffcd\001\002\000" +
    "\004\017\ufffd\001\002\000\004\017\ufffc\001\002\000\010" +
    "\014\142\015\141\023\136\001\002\000\004\011\237\001" +
    "\002\000\004\013\uffd3\001\002\000\032\017\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\030\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\001\002\000\004\013\242" +
    "\001\002\000\032\017\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\030\ufffa\037\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\032\004\043\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\011\001\001\000\002\001" +
    "\001\000\026\005\017\006\024\012\033\015\027\024\023" +
    "\026\013\033\014\045\015\046\030\051\022\001\001\000" +
    "\006\011\240\013\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\017\006\233\007" +
    "\232\012\033\015\027\024\023\026\013\033\014\045\015" +
    "\046\030\051\022\001\001\000\002\001\001\000\004\027" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\041\036\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\043\001\001\000\002\001" +
    "\001\000\004\016\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\054" +
    "\001\001\000\004\041\055\001\001\000\026\015\066\021" +
    "\065\024\064\025\063\026\056\031\061\033\057\045\060" +
    "\046\067\051\022\001\001\000\006\011\111\013\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\105\001\001\000\030\015\066\021\103\022" +
    "\104\024\064\025\063\026\056\031\061\033\057\045\060" +
    "\046\067\051\022\001\001\000\002\001\001\000\004\042" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\077\001\001\000\026\015\066\021\100\024\064\025" +
    "\063\026\056\031\061\033\057\045\060\046\067\051\022" +
    "\001\001\000\004\042\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\115\001\001\000\002\001\001\000\004\016" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\124\016\125\001" +
    "\001\000\002\001\001\000\004\004\127\001\001\000\002" +
    "\001\001\000\004\016\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\137\050\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\047\144\050\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\173\001\001" +
    "\000\002\001\001\000\004\041\151\001\001\000\006\011" +
    "\152\013\112\001\001\000\002\001\001\000\004\037\154" +
    "\001\001\000\006\016\041\036\155\001\001\000\004\040" +
    "\156\001\001\000\002\001\001\000\004\023\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\066\021\164\024\064\025\063\026\056\031\061" +
    "\033\057\045\060\046\067\051\022\001\001\000\004\052" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\041\036\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\200\001" +
    "\001\000\004\041\201\001\001\000\026\015\066\021\202" +
    "\024\064\025\063\026\056\031\061\033\057\045\060\046" +
    "\067\051\022\001\001\000\004\052\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\213\017\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\015\066\021\217" +
    "\024\064\025\063\026\056\031\061\033\057\045\060\046" +
    "\067\051\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\223\001\001\000\004\020" +
    "\225\001\001\000\006\013\213\017\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\235\050\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
        private Lexic lexic;

        public Parser(Lexic l, java_cup.runtime.SymbolFactory sf) {
                super(l, sf);
                this.lexic = l;
        }

        public Parser(Lexic l) {
                this(l, new ComplexSymbolFactory());
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= principal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodePrincipal start_val = (NodePrincipal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // principal ::= programa PRINCIPAL EParen DParen pmb EClau sentencies DClau 
            {
              NodePrincipal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodePrincipal(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= 
            {
              NodePrograma RESULT =null;
		 RESULT = new NodePrograma(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pmb ::= 
            {
              NodePmb RESULT =null;
		RESULT = new NodePmb();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pmb",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencies ::= sentencia sentencies2 
            {
              NodeSentencies RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies2 s2 = (NodeSentencies2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies(s,s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencies2 ::= sentencies 
            {
              NodeSentencies2 RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies2(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencies2 ::= 
            {
              NodeSentencies2 RESULT =null;
		 RESULT = new NodeSentencies2();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= cons decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= bucle 
            {
              NodeSentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle b = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= condicional 
            {
              NodeSentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional c = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= decl_funcio 
            {
              NodeSentencia RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl_funcio ::= FUNCIO tipusf ID EParen param DParen EClau blocf DClau 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcio",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipusf ::= ENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipusf ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipusf ::= BUIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= tipus ID ASSIGN exprsimple param2 
            {
              NodeParam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam2 p2 = (NodeParam2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam(t, id, v, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= 
            {
              NodeParam RESULT =null;
		 RESULT = new NodeParam(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param2 ::= COMA param 
            {
              NodeParam2 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam p = (NodeParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam2(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param2 ::= 
            {
              NodeParam2 RESULT =null;
		 RESULT = new NodeParam2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cons ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cons",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cons ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cons",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // blocf ::= sentenciaf blocf2 
            {
              NodeBlocf RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf2 b = (NodeBlocf2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf(s,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // blocf2 ::= blocf 
            {
              NodeBlocf2 RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf2(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // blocf2 ::= 
            {
              NodeBlocf2 RESULT =null;
		 RESULT = new NodeBlocf2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaf ::= cons decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaf ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaf ::= bucle 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle v = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaf ::= condicional 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional v = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaf ::= sretorna 
            {
              NodeSentencia RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaf ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaf ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sretorna ::= RETORNA exprsimple PUNTICOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sretorna",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decl_variable ::= tipus ID varinic 
            {
              NodeDecl_Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeVarinic vi = (NodeVarinic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeDecl_Variable(t, id, vi, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varinic ::= ASSIGN exprsimple 
            {
              NodeVarinic RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varinic ::= 
            {
              NodeVarinic RESULT =null;
		 RESULT = new NodeVarinic(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varinic2 ::= ID ASSIGN exprsimple 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v1 = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, v1, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varinic2 ::= ID ASSIGN exprcomposta 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprcomposta e = (NodeExprcomposta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, e, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprcomposta ::= exprsimple operador_expr exprsimple 
            {
              NodeExprcomposta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_expr o = (NodeOperador_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple b = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprcomposta(a,o,b,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprcomposta",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operador_expr ::= SUMA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operador_expr ::= RESTA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operador_expr ::= MUL 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operador_expr ::= DIV 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sortida ::= SORTIDA EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sortida ::= SORTIDALN EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // llista_valors ::= valor 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeValor v = (NodeValor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llista_valors ::= valor COMA llista_valors 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeValor v = (NodeValor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeLlistaValors lv = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v, lv);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor ::= ID 
            {
              NodeValor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeValor(NodeValor.exprsimple.id, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor ::= ENTER 
            {
              NodeValor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeValor(NodeValor.exprsimple.enter, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor ::= BOOLEA 
            {
              NodeValor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeValor(NodeValor.exprsimple.boolea, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // entrada ::= ENTRADA EParen ID DParen 
            {
              NodeEntrada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEntrada(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicional ::= SI etiquetacond EParen condicio DParen EClau condiciobot incambit blocf decambit DClau condsino 
            {
              NodeCondicional RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodeCondicio a = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeBlocf b = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondsino c = (NodeCondsino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicional(a,b,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicio ::= exprsimple operador_cond exprsimple 
            {
              NodeCondicio RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_cond o = (NodeOperador_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v1 = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(v,o,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicio ::= ID 
            {
              NodeCondicio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condsino ::= SINO EClau incambit blocf decambit DClau 
            {
              NodeCondsino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeCondsino(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condsino ::= 
            {
              NodeCondsino RESULT =null;
		 RESULT = new NodeCondsino(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_cond ::= OLI 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_cond ::= OLO 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_cond ::= IGUAL 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_cond ::= DIFERENT 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bucle ::= inicibucle MENTRE etiquetacond EParen condicio DParen EClau condiciobot incambit blocf retornabucle DClau 
            {
              NodeBucle RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		NodeInicibucle a = (NodeInicibucle)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodeEtiquetacond b = (NodeEtiquetacond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodeCondicio c = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeCondiciobot d = (NodeCondiciobot)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeIncambit e = (NodeIncambit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeBlocf f = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeRetornabucle g = (NodeRetornabucle)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(a,b,c,d,e,f,g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bucle ::= inicibucle PER EParen incambit decl_variable PUNTICOMA etiquetacond condicio condiciobot PUNTICOMA comportamentvl DParen EClau blocf retornabucle DClau 
            {
              NodeBucle RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		NodeInicibucle a = (NodeInicibucle)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		NodeIncambit b = (NodeIncambit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		NodeDecl_Variable c = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodeEtiquetacond d = (NodeEtiquetacond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodeCondicio e = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodeCondiciobot f = (NodeCondiciobot)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodeComportamentv1 g = (NodeComportamentv1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeBlocf h = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeRetornabucle i = (NodeRetornabucle)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(a,b,c,d,e,f,g,h,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comportamentvl ::= ID SUMA SUMA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.INCREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comportamentvl ::= ID RESTA RESTA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.DECREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comportamentvl ::= 
            {
              NodeComportamentv1 RESULT =null;
		 RESULT = new NodeComportamentv1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprsimple ::= ID 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.exprsimple.id, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exprsimple ::= ENTER 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.exprsimple.enter, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exprsimple ::= BOOLEA 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.exprsimple.boolea, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipus ::= ENT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.ent); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipus ::= BOOL 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.bool); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // etiquetacond ::= 
            {
              NodeEtiquetacond RESULT =null;
		 RESULT = new NodeEtiquetacond(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("etiquetacond",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condiciobot ::= 
            {
              NodeCondiciobot RESULT =null;
		 RESULT = new NodeCondiciobot(false) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciobot",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // incambit ::= 
            {
              NodeIncambit RESULT =null;
		 RESULT = new NodeIncambit(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incambit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // decambit ::= 
            {
              NodeDecambit RESULT =null;
		 RESULT = new NodeDecambit(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decambit",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicibucle ::= 
            {
              NodeInicibucle RESULT =null;
		 RESULT = new NodeInicibucle();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicibucle",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // retornabucle ::= 
            {
              NodeRetornabucle RESULT =null;
		 RESULT = new NodeRetornabucle();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornabucle",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
