
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front_end.parser;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import front_end.simbols.*;
import front_end.scanner.*;
import errors.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\042\004\000\002\043" +
    "\004\000\002\043\002\000\002\032\011\000\002\036\002" +
    "\000\002\006\004\000\002\007\003\000\002\007\002\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\013\006\000" +
    "\002\013\006\000\002\023\004\000\002\023\002\000\002" +
    "\024\004\000\002\024\002\000\002\012\013\000\002\021" +
    "\005\000\002\021\002\000\002\022\004\000\002\022\002" +
    "\000\002\020\003\000\002\020\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\052\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\025\004\000\002\026\003\000\002\026\002\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\031\005\000\002\031\004\000" +
    "\002\011\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\002\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\002\003\000\002\002\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\037\006\000\002\037\006\000\002" +
    "\041\003\000\002\041\005\000\002\040\006\000\002\033" +
    "\012\000\002\035\005\000\002\035\003\000\002\035\003" +
    "\000\002\034\006\000\002\034\002\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\030\011\000\002\030" +
    "\015\000\002\030\003\000\002\027\005\000\002\027\005" +
    "\000\002\027\002\000\002\044\006\000\002\044\005\000" +
    "\002\045\004\000\002\045\005\000\002\046\006\000\002" +
    "\046\004\000\002\047\004\000\002\050\005\000\002\050" +
    "\006\000\002\051\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\026\006\041\ufffe\001\002\000\006\026" +
    "\006\041\ufffe\001\002\000\004\002\313\001\002\000\010" +
    "\024\273\025\276\030\275\001\002\000\004\041\ufffc\001" +
    "\002\000\004\041\012\001\002\000\004\002\000\001\002" +
    "\000\004\010\013\001\002\000\004\011\014\001\002\000" +
    "\004\016\015\001\002\000\032\003\035\023\023\024\044" +
    "\025\040\026\006\035\022\036\045\037\034\042\024\043" +
    "\033\044\036\047\041\001\002\000\004\013\272\001\002" +
    "\000\034\003\ufff4\017\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\047\ufff4\001\002\000\034\003\ufff6\017\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\035\ufff6\036\ufff6\037\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\047\ufff6\001\002\000\004\013\271\001" +
    "\002\000\004\010\263\001\002\000\042\003\uffed\010\066" +
    "\012\162\017\uffed\021\064\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\035\uffed\036\uffed\037\uffed\042\uffed\043\uffed\044\uffed" +
    "\047\uffed\001\002\000\004\010\260\001\002\000\004\013" +
    "\257\001\002\000\004\017\256\001\002\000\034\003\035" +
    "\017\ufff9\023\023\024\044\025\040\026\006\035\022\036" +
    "\045\037\034\042\024\043\033\044\036\047\041\001\002" +
    "\000\034\003\ufff5\017\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\047\ufff5\001\002\000\004\013\253\001\002\000\006\021" +
    "\243\023\051\001\002\000\004\010\240\001\002\000\004" +
    "\010\225\001\002\000\036\003\uffa3\013\224\017\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\047\uffa3\001\002\000\004\010" +
    "\221\001\002\000\004\013\220\001\002\000\006\021\uffd9" +
    "\023\uffd9\001\002\000\006\021\uffd8\023\uffd8\001\002\000" +
    "\004\013\217\001\002\000\004\013\216\001\002\000\006" +
    "\021\uffda\023\uffda\001\002\000\004\010\046\001\002\000" +
    "\010\024\044\025\040\047\041\001\002\000\004\013\106" +
    "\001\002\000\004\023\051\001\002\000\006\012\053\013" +
    "\uffc1\001\002\000\004\013\uffc4\001\002\000\014\005\054" +
    "\014\061\015\057\023\055\050\056\001\002\000\004\014" +
    "\105\001\002\000\022\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\066\013\uffe1\021\064\046\uffe1\001\002\000\042\003" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\013\uffdd" +
    "\017\uffdd\020\uffdd\022\uffdd\023\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\046\uffdd\001\002\000\042\003\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\011\uffde\013\uffde\017\uffde\020" +
    "\uffde\022\uffde\023\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\046\uffde\001\002\000\004\013\uffc3\001\002\000\042\003" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\013\uffdf" +
    "\017\uffdf\020\uffdf\022\uffdf\023\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\046\uffdf\001\002\000\042\003\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\011\uffdc\013\uffdc\017\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\046\uffdc\001\002\000\004\013\uffc2\001\002\000\014\005" +
    "\054\014\061\015\057\023\070\050\056\001\002\000\044" +
    "\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\013" +
    "\uffdb\017\uffdb\020\uffdb\021\100\022\uffdb\023\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\046\uffdb\001\002\000\020\003" +
    "\071\005\054\011\uffe9\014\061\015\057\023\070\050\056" +
    "\001\002\000\006\011\uffe7\020\075\001\002\000\044\003" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\013\uffe1" +
    "\017\uffe1\020\uffe1\021\064\022\uffe1\023\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\046\uffe1\001\002\000\004\011\074" +
    "\001\002\000\004\011\073\001\002\000\004\013\uffec\001" +
    "\002\000\004\013\uffeb\001\002\000\016\005\054\011\uffe9" +
    "\014\061\015\057\023\070\050\056\001\002\000\004\011" +
    "\uffea\001\002\000\004\011\uffe8\001\002\000\014\005\054" +
    "\014\061\015\057\023\070\050\056\001\002\000\004\022" +
    "\102\001\002\000\046\003\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\011\uff97\012\uff97\013\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\046\uff97\001\002\000\004\022\104\001\002\000\046\003" +
    "\uff98\004\uff98\005\uff98\006\uff98\007\uff98\011\uff98\012\uff98" +
    "\013\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\046\uff98\001\002\000\042" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013" +
    "\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\046\uffe0\001\002\000\016\003\111\005" +
    "\054\014\061\015\057\023\070\050\056\001\002\000\004" +
    "\013\122\001\002\000\022\003\114\011\uffaf\013\uffaf\023" +
    "\112\031\115\032\117\033\116\034\120\001\002\000\006" +
    "\011\uffae\013\uffae\001\002\000\016\003\uffa6\005\uffa6\014" +
    "\uffa6\015\uffa6\023\uffa6\050\uffa6\001\002\000\016\003\111" +
    "\005\054\014\061\015\057\023\070\050\056\001\002\000" +
    "\016\003\uffa7\005\uffa7\014\uffa7\015\uffa7\023\uffa7\050\uffa7" +
    "\001\002\000\016\003\uffa9\005\uffa9\014\uffa9\015\uffa9\023" +
    "\uffa9\050\uffa9\001\002\000\016\003\uffab\005\uffab\014\uffab" +
    "\015\uffab\023\uffab\050\uffab\001\002\000\016\003\uffa8\005" +
    "\uffa8\014\uffa8\015\uffa8\023\uffa8\050\uffa8\001\002\000\016" +
    "\003\uffaa\005\uffaa\014\uffaa\015\uffaa\023\uffaa\050\uffaa\001" +
    "\002\000\006\011\uffb0\013\uffb0\001\002\000\006\011\uffa0" +
    "\023\123\001\002\000\006\004\213\005\212\001\002\000" +
    "\004\011\125\001\002\000\004\016\126\001\002\000\032" +
    "\003\142\023\133\024\044\025\040\027\141\035\022\036" +
    "\045\037\034\042\024\043\033\044\036\047\041\001\002" +
    "\000\034\003\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd\027" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\047\uffcd\001\002\000\004\013\211\001\002\000\034\003" +
    "\uffcf\017\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\042\uffcf\043\uffcf\044\uffcf\047\uffcf\001" +
    "\002\000\004\013\210\001\002\000\040\003\uffc7\012\162" +
    "\017\uffc7\021\064\023\uffc7\024\uffc7\025\uffc7\027\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\042\uffc7\043\uffc7\044\uffc7\047\uffc7" +
    "\001\002\000\034\003\142\017\uffd2\023\133\024\044\025" +
    "\040\027\141\035\022\036\045\037\034\042\024\043\033" +
    "\044\036\047\041\001\002\000\004\013\155\001\002\000" +
    "\004\017\154\001\002\000\004\013\153\001\002\000\034" +
    "\003\uffce\017\uffce\023\uffce\024\uffce\025\uffce\027\uffce\035" +
    "\uffce\036\uffce\037\uffce\042\uffce\043\uffce\044\uffce\047\uffce" +
    "\001\002\000\016\005\054\013\151\014\061\015\057\023" +
    "\070\050\056\001\002\000\036\003\uffa3\013\147\017\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\027\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\047\uffa3\001\002\000\004" +
    "\013\146\001\002\000\004\013\145\001\002\000\034\003" +
    "\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\042\uffcc\043\uffcc\044\uffcc\047\uffcc\001" +
    "\002\000\034\003\uffc9\017\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\027\uffc9\035\uffc9\036\uffc9\037\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\047\uffc9\001\002\000\034\003\uffc8\017\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\027\uffc8\035\uffc8\036\uffc8\037\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\047\uffc8\001\002\000\004\013\152" +
    "\001\002\000\034\003\uffc5\017\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\027\uffc5\035\uffc5\036\uffc5\037\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\047\uffc5\001\002\000\034\003\uffc6\017\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\027\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\047\uffc6\001\002\000\034\003" +
    "\uffd0\017\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\042\uffd0\043\uffd0\044\uffd0\047\uffd0\001" +
    "\002\000\036\003\uffa4\017\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\035\uffa4\036\uffa4\037\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\047\uffa4\001\002\000\034\003\uffca\017\uffca" +
    "\023\uffca\024\uffca\025\uffca\027\uffca\035\uffca\036\uffca\037" +
    "\uffca\042\uffca\043\uffca\044\uffca\047\uffca\001\002\000\004" +
    "\017\uffd3\001\002\000\004\017\uffd4\001\002\000\006\012" +
    "\206\021\100\001\002\000\004\013\uffbe\001\002\000\020" +
    "\005\054\014\061\015\057\016\164\023\055\045\166\050" +
    "\056\001\002\000\004\013\uffbf\001\002\000\014\005\054" +
    "\014\061\015\057\023\070\050\056\001\002\000\016\004" +
    "\176\005\172\006\175\007\177\013\uffbd\046\173\001\002" +
    "\000\004\021\064\001\002\000\004\013\uff9a\001\002\000" +
    "\004\013\uffc0\001\002\000\006\013\uff99\021\100\001\002" +
    "\000\014\005\uffba\014\uffba\015\uffba\023\uffba\050\uffba\001" +
    "\002\000\014\005\uffb7\014\uffb7\015\uffb7\023\uffb7\050\uffb7" +
    "\001\002\000\014\005\054\014\061\015\057\023\070\050" +
    "\056\001\002\000\014\005\uffb9\014\uffb9\015\uffb9\023\uffb9" +
    "\050\uffb9\001\002\000\014\005\uffbb\014\uffbb\015\uffbb\023" +
    "\uffbb\050\uffbb\001\002\000\014\005\uffb8\014\uffb8\015\uffb8" +
    "\023\uffb8\050\uffb8\001\002\000\004\013\uffbc\001\002\000" +
    "\004\017\205\001\002\000\010\011\uffb4\017\uffb4\020\203" +
    "\001\002\000\014\005\054\014\061\015\057\023\070\050" +
    "\056\001\002\000\006\011\uffb3\017\uffb3\001\002\000\004" +
    "\013\uff9b\001\002\000\014\005\054\014\061\015\057\023" +
    "\070\050\056\001\002\000\004\013\uff96\001\002\000\034" +
    "\003\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\042\uffd1\043\uffd1\044\uffd1\047\uffd1" +
    "\001\002\000\034\003\uffcb\017\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\027\uffcb\035\uffcb\036\uffcb\037\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\047\uffcb\001\002\000\004\005\215\001\002\000" +
    "\004\004\214\001\002\000\004\011\uffa2\001\002\000\004" +
    "\011\uffa1\001\002\000\034\003\ufff3\017\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\047\ufff3\001\002\000\034\003\ufff2\017" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\001\002\000" +
    "\034\003\uffef\017\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\035\uffef\036\uffef\037\uffef\042\uffef\043\uffef\044\uffef\047" +
    "\uffef\001\002\000\004\023\222\001\002\000\004\011\223" +
    "\001\002\000\004\013\uffb2\001\002\000\034\003\uffee\017" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\035\uffee\036\uffee" +
    "\037\uffee\042\uffee\043\uffee\044\uffee\047\uffee\001\002\000" +
    "\016\003\111\005\054\014\061\015\057\023\070\050\056" +
    "\001\002\000\004\011\227\001\002\000\004\016\230\001" +
    "\002\000\032\003\142\023\133\024\044\025\040\027\141" +
    "\035\022\036\045\037\034\042\024\043\033\044\036\047" +
    "\041\001\002\000\004\017\232\001\002\000\040\003\uffac" +
    "\017\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\234\042\uffac\043\uffac\044\uffac" +
    "\047\uffac\001\002\000\036\003\uffb1\017\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\047\uffb1\001\002\000\004\016" +
    "\235\001\002\000\032\003\142\023\133\024\044\025\040" +
    "\027\141\035\022\036\045\037\034\042\024\043\033\044" +
    "\036\047\041\001\002\000\004\017\237\001\002\000\036" +
    "\003\uffad\017\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\035\uffad\036\uffad\037\uffad\042\uffad\043\uffad\044\uffad" +
    "\047\uffad\001\002\000\014\005\054\014\061\015\057\023" +
    "\070\050\056\001\002\000\004\011\242\001\002\000\004" +
    "\013\uffb5\001\002\000\004\022\252\001\002\000\006\021" +
    "\246\023\245\001\002\000\006\012\251\013\uff9e\001\002" +
    "\000\004\022\247\001\002\000\006\021\uff9c\023\uff9c\001" +
    "\002\000\004\013\uff9f\001\002\000\006\016\164\045\166" +
    "\001\002\000\006\021\uff9d\023\uff9d\001\002\000\034\003" +
    "\ufff7\017\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\042\ufff7\043\ufff7\044\ufff7\047\ufff7\001" +
    "\002\000\004\017\ufffb\001\002\000\004\017\ufffa\001\002" +
    "\000\004\002\ufffd\001\002\000\034\003\ufff0\017\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\047\ufff0\001\002\000\014\005" +
    "\054\014\061\015\057\023\070\050\056\001\002\000\004" +
    "\011\262\001\002\000\004\013\uffb6\001\002\000\016\003" +
    "\111\005\054\014\061\015\057\023\070\050\056\001\002" +
    "\000\004\011\265\001\002\000\004\016\266\001\002\000" +
    "\032\003\142\023\133\024\044\025\040\027\141\035\022" +
    "\036\045\037\034\042\024\043\033\044\036\047\041\001" +
    "\002\000\004\017\270\001\002\000\036\003\uffa5\017\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\042\uffa5\043\uffa5\044\uffa5\047\uffa5\001\002" +
    "\000\034\003\ufff8\017\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\047\ufff8\001\002\000\034\003\ufff1\017\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\035\ufff1\036\ufff1\037\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\047\ufff1\001\002\000\004\023\uffd7\001" +
    "\002\000\004\023\277\001\002\000\004\023\uffd5\001\002" +
    "\000\004\023\uffd6\001\002\000\004\010\300\001\002\000" +
    "\012\011\uffe4\024\044\025\040\047\041\001\002\000\004" +
    "\023\307\001\002\000\004\011\303\001\002\000\004\016" +
    "\304\001\002\000\032\003\142\023\133\024\044\025\040" +
    "\027\141\035\022\036\045\037\034\042\024\043\033\044" +
    "\036\047\041\001\002\000\004\017\306\001\002\000\036" +
    "\003\uffe6\017\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\047\uffe6\001\002\000\006\011\uffe2\020\310\001\002\000" +
    "\012\011\uffe4\024\044\025\040\047\041\001\002\000\004" +
    "\011\uffe5\001\002\000\004\011\uffe3\001\002\000\004\002" +
    "\001\001\002\000\004\041\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\010\012\003\042\004\043\006\001\001\000" +
    "\006\012\003\043\313\001\001\000\002\001\001\000\004" +
    "\015\273\001\001\000\006\032\010\036\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\026\006\025\011" +
    "\020\012\016\013\042\014\031\017\030\030\017\033\027" +
    "\037\041\040\015\044\024\051\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\046\160\050\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\026\006\254\007\253\011\020\012\016\013\042\014" +
    "\031\017\030\030\017\033\027\037\041\040\015\044\024" +
    "\051\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\046\014\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\051\001\001\000\002\001\001\000\010\013" +
    "\062\020\057\052\061\001\001\000\002\001\001\000\004" +
    "\050\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\102\052\061\001\001\000\002\001" +
    "\001\000\010\020\066\023\071\052\061\001\001\000\004" +
    "\024\075\001\001\000\004\050\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\066\023\076\052\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\100\052\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\107\035\106" +
    "\052\061\001\001\000\002\001\001\000\004\010\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\107" +
    "\035\120\052\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\133" +
    "\011\131\014\031\017\136\025\135\030\130\031\126\033" +
    "\137\037\143\040\127\044\134\051\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\160\050\157\001\001\000\034\005\133" +
    "\011\131\014\031\017\136\025\155\026\156\030\130\031" +
    "\126\033\137\037\143\040\127\044\134\051\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\147\052\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\162\013\167\020\164\047\166\052\061\001\001\000\002" +
    "\001\001\000\010\020\201\041\200\052\061\001\001\000" +
    "\004\003\173\001\001\000\004\050\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\177\020\164\052\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\201\041\203\052\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\206\052\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\107\035\225\052\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\133" +
    "\011\131\014\031\017\136\025\230\030\130\031\126\033" +
    "\137\037\143\040\127\044\134\051\142\001\001\000\002" +
    "\001\001\000\004\034\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\133\011\131\014\031\017\136" +
    "\025\235\030\130\031\126\033\137\037\143\040\127\044" +
    "\134\051\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\201\041\240\052\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\201" +
    "\041\260\052\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\107\035\263\052\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\133\011\131\014" +
    "\031\017\136\025\266\030\130\031\126\033\137\037\143" +
    "\040\127\044\134\051\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\300\021\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\133\011\131\014\031\017\136\025\304\030\130" +
    "\031\126\033\137\037\143\040\127\044\134\051\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\310" +
    "\001\001\000\006\014\300\021\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
        
        private Lexic lexic;

        public Parser(Lexic l, java_cup.runtime.SymbolFactory sf) {
                super(l, sf);
                this.lexic = l;
        }

        public Parser(Lexic l) {
                this(l, new ComplexSymbolFactory());
        }

        public void logSintacticError(String errorMessage) {
                ErrorLogger.logSintacticError(lexic.getLineColumn(),errorMessage);
                System.err.println(errorMessage);
                System.exit(0);
        }

        public void logLexicError(String errorMessage) {
                ErrorLogger.logLexicError(lexic.getLineColumn(),errorMessage);
                System.err.println(errorMessage);
                System.exit(0);
        }

        @Override
        public void syntax_error(Symbol cur_token) {
                // Custom error handling
                if (cur_token != null && cur_token.sym == ParserSym.ID) {
                logLexicError("Simbol inesperat \"" + cur_token.value + "\"");
                }else{
                logSintacticError("Símbol inesperat \"" + (cur_token == null ? "EOF" : cur_token.value) + "\"");
                }
                System.exit(0);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codi EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeCodi start_val = (NodeCodi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codi ::= procedures principal 
            {
              NodeCodi RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeProcedures a = (NodeProcedures)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodePrincipal b = (NodePrincipal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCodi(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codi",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedures ::= decl_funcio procedures 
            {
              NodeProcedures RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_funcio a = (NodeDecl_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeProcedures b = (NodeProcedures)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeProcedures(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedures ::= 
            {
              NodeProcedures RESULT =null;
		 RESULT = new NodeProcedures();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= programa PRINCIPAL EParen DParen EClau sentencies DClau 
            {
              NodePrincipal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodePrincipal(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= 
            {
              NodePrograma RESULT =null;
		 RESULT = new NodePrograma(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencies ::= sentencia sentencies2 
            {
              NodeSentencies RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies2 s2 = (NodeSentencies2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies(s,s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencies2 ::= sentencies 
            {
              NodeSentencies2 RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies2(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencies2 ::= 
            {
              NodeSentencies2 RESULT =null;
		 RESULT = new NodeSentencies2();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"decl_variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"varinic2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= bucle 
            {
              NodeSentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle b = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(b,"bucle"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= condicional 
            {
              NodeSentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional c = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(c,"condicional"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= decl_funcio 
            {
              NodeSentencia RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeDecl_funcio df = (NodeDecl_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(df,"decl_funcio"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= crida_funcio PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeCrida_funcio cf = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(cf,"crida_funcio"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(s,"sortida"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(e,"entrada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= decl_taula PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_taula a = (NodeDecl_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(a,"decl_taula"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= inic_element_taula PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeInic_element_taula a = (NodeInic_element_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(a,"inic_element_taula"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= error PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= ID 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // crida_funcio ::= ID EParen arg DParen 
            {
              NodeCrida_funcio RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeArg a = (NodeArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeCrida_funcio(name, a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crida_funcio",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // crida_funcio ::= ID EParen error DParen 
            {
              NodeCrida_funcio RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                    logSintacticError("Crida a funció '" + name + "' amb arguments incorrectes."); RESULT = null; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crida_funcio",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arg ::= exprsimple arg2 
            {
              NodeArg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple e = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeArg2 a2 = (NodeArg2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArg(e, a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arg ::= 
            {
              NodeArg RESULT =null;
		 RESULT = new NodeArg(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arg2 ::= COMA arg 
            {
              NodeArg2 RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeArg a = (NodeArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArg2(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arg2 ::= 
            {
              NodeArg2 RESULT =null;
		 RESULT = new NodeArg2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl_funcio ::= FUNCIO tipusf ID EParen param DParen EClau blocf DClau 
            {
              NodeDecl_funcio RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeParam p = (NodeParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf b = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeDecl_funcio(t,name,p,b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcio",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param ::= tipus ID param2 
            {
              NodeParam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam2 p2 = (NodeParam2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam(t, id, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param ::= 
            {
              NodeParam RESULT =null;
		 RESULT = new NodeParam(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param2 ::= COMA param 
            {
              NodeParam2 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam p = (NodeParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam2(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param2 ::= 
            {
              NodeParam2 RESULT =null;
		 RESULT = new NodeParam2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exprsimple ::= ID 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.id, v, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprsimple ::= RESTA ENTER 
            {
              NodeExprsimple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(a.toString(), NodeExprsimple.tipusexpr.ent, v.toString(), lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprsimple ::= ENTER 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.ent, v.toString(), lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprsimple ::= BOOLEA 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.bool, v.toString(), lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprsimple ::= STRING 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.text, v, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprsimple ::= valorTaula 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeValorTaula v = (NodeValorTaula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(v, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valorTaula ::= ID especificacio_dimensio 
            {
              NodeValorTaula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeEspecificacio_dimensio b = (NodeEspecificacio_dimensio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NodeValorTaula(a, b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTaula",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipus ::= ENT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.ENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipus ::= BOOL 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipus ::= TEXT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.TEXT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipusf ::= ENT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.ENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipusf ::= BOOL 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipusf ::= BUIT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BUIT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // blocf ::= sentenciaf blocf2 
            {
              NodeBlocf RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf2 b = (NodeBlocf2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf(s,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // blocf2 ::= blocf 
            {
              NodeBlocf2 RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf2(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // blocf2 ::= 
            {
              NodeBlocf2 RESULT =null;
		 RESULT = new NodeBlocf2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentenciaf ::= decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"decl_variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaf ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"varinic2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaf ::= bucle 
            {
              NodeSentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle b = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(b,"bucle"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaf ::= condicional 
            {
              NodeSentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional c = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(c,"condicional"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentenciaf ::= retorna 
            {
              NodeSentencia RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeRetorna r = (NodeRetorna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(r,"retorna"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentenciaf ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(s, "sortida"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciaf ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(e, "entrada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciaf ::= decl_taula PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_taula a = (NodeDecl_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(a,"decl_taula"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciaf ::= inic_element_taula PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeInic_element_taula a = (NodeInic_element_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(a,"inic_element_taula"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaf ::= error PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaf ::= ID 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // retorna ::= RETORNA exprsimple PUNTICOMA 
            {
              NodeRetorna RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple expr = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeRetorna(expr, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorna",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // retorna ::= RETORNA PUNTICOMA 
            {
              NodeRetorna RESULT =null;
		 RESULT = new NodeRetorna(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorna",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decl_variable ::= tipus ID varinic 
            {
              NodeDecl_Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeVarinic vi = (NodeVarinic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeDecl_Variable(t, id, vi, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // varinic ::= ASSIGN exprsimple 
            {
              NodeVarinic RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // varinic ::= ASSIGN crida_funcio 
            {
              NodeVarinic RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCrida_funcio c = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // varinic ::= 
            {
              NodeVarinic RESULT =null;
		 RESULT = new NodeVarinic(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // varinic2 ::= ID ASSIGN crida_funcio 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCrida_funcio c = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, c, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // varinic2 ::= ID ASSIGN exprcomposta 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprcomposta e = (NodeExprcomposta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, e, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // varinic2 ::= ID inicialitzacio_taula 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeInicialitzacio_taula e = (NodeInicialitzacio_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, e, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exprcomposta ::= exprsimple 
            {
              NodeExprcomposta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprcomposta(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprcomposta",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exprcomposta ::= exprsimple operador_expr exprcomposta 
            {
              NodeExprcomposta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_expr b = (NodeOperador_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprcomposta c = (NodeExprcomposta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprcomposta(a, b, c, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprcomposta",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_expr ::= SUMA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_expr ::= RESTA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_expr ::= MUL 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_expr ::= DIV 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_expr ::= MOD 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sortida ::= SORTIDA EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,false,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sortida ::= SORTIDALN EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,true,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // llista_valors ::= exprsimple 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // llista_valors ::= exprsimple COMA llista_valors 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeLlistaValors lv = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v, lv);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // entrada ::= ENTRADA EParen ID DParen 
            {
              NodeEntrada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEntrada(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicional ::= SI EParen condicio DParen EClau blocf DClau condsino 
            {
              NodeCondicional RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodeCondicio a = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeBlocf b = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondsino c = (NodeCondsino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicional(a,b,c,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicio ::= exprsimple operador_cond condicio 
            {
              NodeCondicio RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_cond b = (NodeOperador_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicio c = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(a,b,c,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicio ::= exprsimple 
            {
              NodeCondicio RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(a,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicio ::= error 
            {
              NodeCondicio RESULT =null;
		      logLexicError("Condició invàlida"); RESULT = null;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condsino ::= SINO EClau blocf DClau 
            {
              NodeCondsino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeCondsino(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condsino ::= 
            {
              NodeCondsino RESULT =null;
		 RESULT = new NodeCondsino(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador_cond ::= OLI 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador_cond ::= OLO 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_cond ::= IGUAL 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_cond ::= DIFERENT 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_cond ::= error 
            {
              NodeOperador_cond RESULT =null;
		      logLexicError("Operador invàlid"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_cond ::= ID 
            {
              NodeOperador_cond RESULT =null;
		 logLexicError("Operador invàlid"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bucle ::= MENTRE EParen condicio DParen EClau blocf DClau 
            {
              NodeBucle RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeCondicio c = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf bloc = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(c,bloc,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bucle ::= PER EParen decl_variable PUNTICOMA condicio PUNTICOMA comportamentvl DParen EClau blocf DClau 
            {
              NodeBucle RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodeDecl_Variable decl = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodeCondicio cond = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeComportamentv1 comp = (NodeComportamentv1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf bloc = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(decl,cond,comp,bloc,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bucle ::= error 
            {
              NodeBucle RESULT =null;
		      logLexicError("Bucle invàlid"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comportamentvl ::= ID SUMA SUMA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.INCREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comportamentvl ::= ID RESTA RESTA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.DECREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comportamentvl ::= 
            {
              NodeComportamentv1 RESULT =null;
		 RESULT = new NodeComportamentv1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // decl_taula ::= tipus dimensions_taula ID inicialitzacio_taula 
            {
              NodeDecl_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeTipus a = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeDimensions_taula b = (NodeDimensions_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeInicialitzacio_taula d = (NodeInicialitzacio_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeDecl_taula(a, b, c, d, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_taula",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // decl_taula ::= tipus dimensions_taula ID 
            {
              NodeDecl_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus a = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDimensions_taula b = (NodeDimensions_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeDecl_taula(a, b, c, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_taula",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dimensions_taula ::= EClaudator DClaudator 
            {
              NodeDimensions_taula RESULT =null;
		 RESULT = new NodeDimensions_taula(null, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensions_taula",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dimensions_taula ::= dimensions_taula EClaudator DClaudator 
            {
              NodeDimensions_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeDimensions_taula a = (NodeDimensions_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeDimensions_taula(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensions_taula",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // inicialitzacio_taula ::= ASSIGN EClau llista_valors DClau 
            {
              NodeInicialitzacio_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors a = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeInicialitzacio_taula(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicialitzacio_taula",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // inicialitzacio_taula ::= ASSIGN assignacio_memoria 
            {
              NodeInicialitzacio_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeAssignacio_memoria a = (NodeAssignacio_memoria)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeInicialitzacio_taula(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicialitzacio_taula",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignacio_memoria ::= RESERVA especificacio_dimensio 
            {
              NodeAssignacio_memoria RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeEspecificacio_dimensio a = (NodeEspecificacio_dimensio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeAssignacio_memoria(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignacio_memoria",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // especificacio_dimensio ::= EClaudator exprsimple DClaudator 
            {
              NodeEspecificacio_dimensio RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEspecificacio_dimensio(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificacio_dimensio",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // especificacio_dimensio ::= especificacio_dimensio EClaudator exprsimple DClaudator 
            {
              NodeEspecificacio_dimensio RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeEspecificacio_dimensio a = (NodeEspecificacio_dimensio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple b = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEspecificacio_dimensio(a, b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificacio_dimensio",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // inic_element_taula ::= ID especificacio_dimensio ASSIGN exprsimple 
            {
              NodeInic_element_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeEspecificacio_dimensio b = (NodeEspecificacio_dimensio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple c = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeInic_element_taula(a, b, c, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inic_element_taula",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
