
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front_end.parser;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import front_end.simbols.*;
import front_end.scanner.*;
import errors.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\045\004\000\002\046" +
    "\004\000\002\046\002\000\002\034\011\000\002\041\002" +
    "\000\002\006\004\000\002\007\003\000\002\007\002\000" +
    "\002\004\005\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\013\006\000\002\024\004\000\002\024\002\000" +
    "\002\025\004\000\002\025\002\000\002\012\013\000\002" +
    "\022\005\000\002\022\002\000\002\023\004\000\002\023" +
    "\002\000\002\033\003\000\002\033\002\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\026\004\000\002\027\003" +
    "\000\002\027\002\000\002\005\005\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\032\005\000\002\032" +
    "\004\000\002\011\005\000\002\016\004\000\002\016\002" +
    "\000\002\017\005\000\002\017\005\000\002\002\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\042\006\000\002\042\006\000\002\044" +
    "\003\000\002\044\005\000\002\043\006\000\002\035\012" +
    "\000\002\040\005\000\002\040\003\000\002\036\006\000" +
    "\002\036\002\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\031\011\000\002\031" +
    "\015\000\002\030\005\000\002\030\005\000\002\030\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\027\006\042\ufffe\001\002\000\006\027" +
    "\006\042\ufffe\001\002\000\004\002\241\001\002\000\010" +
    "\024\221\025\224\031\223\001\002\000\004\042\ufffc\001" +
    "\002\000\004\042\012\001\002\000\004\002\000\001\002" +
    "\000\004\010\013\001\002\000\004\011\014\001\002\000" +
    "\004\016\015\001\002\000\032\003\033\023\023\024\uffe3" +
    "\025\uffe3\026\034\027\006\036\022\037\040\040\032\043" +
    "\024\044\031\045\035\001\002\000\004\013\220\001\002" +
    "\000\006\024\043\025\045\001\002\000\034\003\ufff4\017" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\043\ufff4\044\ufff4\045\ufff4\001\002\000" +
    "\034\003\ufff6\017\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\036\ufff6\037\ufff6\040\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\001\002\000\004\010\210\001\002\000\040\003\uffef" +
    "\010\056\012\132\017\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\036\uffef\037\uffef\040\uffef\043\uffef\044\uffef" +
    "\045\uffef\001\002\000\004\010\205\001\002\000\004\017" +
    "\204\001\002\000\034\003\033\017\ufff9\023\023\024\uffe3" +
    "\025\uffe3\026\034\027\006\036\022\037\040\040\032\043" +
    "\024\044\031\045\035\001\002\000\004\013\201\001\002" +
    "\000\034\003\ufff5\017\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\036\ufff5\037\ufff5\040\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\001\002\000\004\010\173\001\002\000\004\010" +
    "\160\001\002\000\004\013\157\001\002\000\006\024\uffe4" +
    "\025\uffe4\001\002\000\004\010\154\001\002\000\004\013" +
    "\153\001\002\000\004\013\152\001\002\000\004\010\041" +
    "\001\002\000\006\024\043\025\045\001\002\000\004\013" +
    "\070\001\002\000\004\023\uffdb\001\002\000\004\023\046" +
    "\001\002\000\004\023\uffda\001\002\000\006\012\050\013" +
    "\uffc8\001\002\000\004\013\uffca\001\002\000\010\014\054" +
    "\015\052\023\051\001\002\000\022\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\056\011\uffe2\013\uffe2\020\uffe2\001\002" +
    "\000\030\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013" +
    "\uffe0\020\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\001\002" +
    "\000\004\013\uffc9\001\002\000\030\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\013\uffe1\020\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\001\002\000\030\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\013\uffdf\020\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\001\002\000\012\011\uffec\014\063\015" +
    "\062\023\060\001\002\000\004\011\067\001\002\000\006" +
    "\011\uffde\020\uffde\001\002\000\006\011\uffea\020\064\001" +
    "\002\000\006\011\uffdc\020\uffdc\001\002\000\006\011\uffdd" +
    "\020\uffdd\001\002\000\012\011\uffec\014\063\015\062\023" +
    "\060\001\002\000\004\011\uffed\001\002\000\004\011\uffeb" +
    "\001\002\000\030\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\013\uffee\020\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\001\002\000\010\014\054\015\052\023\071\001\002\000" +
    "\020\010\056\011\uffb9\013\uffb9\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\001\002\000\004\013\102\001\002\000\012\032" +
    "\075\033\077\034\076\035\100\001\002\000\010\014\054" +
    "\015\052\023\051\001\002\000\010\014\uffb4\015\uffb4\023" +
    "\uffb4\001\002\000\010\014\uffb6\015\uffb6\023\uffb6\001\002" +
    "\000\010\014\uffb3\015\uffb3\023\uffb3\001\002\000\010\014" +
    "\uffb5\015\uffb5\023\uffb5\001\002\000\006\011\uffba\013\uffba" +
    "\001\002\000\006\011\uffae\023\103\001\002\000\006\004" +
    "\147\005\146\001\002\000\004\011\105\001\002\000\004" +
    "\016\106\001\002\000\030\023\113\024\uffe3\025\uffe3\026" +
    "\034\030\120\036\022\037\040\040\032\043\024\044\031" +
    "\045\035\001\002\000\032\017\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\030\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\001\002\000\004\013\145\001\002\000" +
    "\006\024\043\025\045\001\002\000\032\017\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\030\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\001\002\000\004\012\132" +
    "\001\002\000\032\017\uffd4\023\113\024\uffe3\025\uffe3\026" +
    "\034\030\120\036\022\037\040\040\032\043\024\044\031" +
    "\045\035\001\002\000\004\017\127\001\002\000\004\013" +
    "\126\001\002\000\032\017\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\030\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\001\002\000\012\013\124\014\054\015\052" +
    "\023\051\001\002\000\004\013\122\001\002\000\032\017" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce\036\uffce" +
    "\037\uffce\040\uffce\043\uffce\044\uffce\045\uffce\001\002\000" +
    "\004\013\125\001\002\000\032\017\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\030\uffcb\036\uffcb\037\uffcb\040\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\001\002\000\032\017\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\030\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\001\002\000\032\017\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\043\uffd2\044\uffd2\045\uffd2\001\002\000\036" +
    "\003\uffb1\017\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\036\uffb1\037\uffb1\040\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\001\002\000\004\017\uffd5\001\002\000\004\017" +
    "\uffd6\001\002\000\010\014\054\015\052\023\051\001\002" +
    "\000\004\013\uffc6\001\002\000\014\004\137\005\135\006" +
    "\140\007\141\013\uffc7\001\002\000\010\014\uffc3\015\uffc3" +
    "\023\uffc3\001\002\000\010\014\054\015\052\023\051\001" +
    "\002\000\010\014\uffc4\015\uffc4\023\uffc4\001\002\000\010" +
    "\014\uffc2\015\uffc2\023\uffc2\001\002\000\010\014\uffc1\015" +
    "\uffc1\023\uffc1\001\002\000\004\013\uffc5\001\002\000\004" +
    "\013\144\001\002\000\032\017\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\030\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\001\002\000\032\017\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\030\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\001\002\000\004\005\151\001" +
    "\002\000\004\004\150\001\002\000\004\011\uffb0\001\002" +
    "\000\004\011\uffaf\001\002\000\034\003\ufff3\017\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\043\ufff3\044\ufff3\045\ufff3\001\002\000\034\003" +
    "\ufff2\017\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\043\ufff2\044\ufff2\045\ufff2\001" +
    "\002\000\004\023\155\001\002\000\004\011\156\001\002" +
    "\000\004\013\uffbc\001\002\000\034\003\ufff0\017\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\043\ufff0\044\ufff0\045\ufff0\001\002\000\010\014" +
    "\054\015\052\023\071\001\002\000\004\011\162\001\002" +
    "\000\004\016\163\001\002\000\030\023\113\024\uffe3\025" +
    "\uffe3\026\034\030\120\036\022\037\040\040\032\043\024" +
    "\044\031\045\035\001\002\000\004\017\165\001\002\000" +
    "\040\003\uffb7\017\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\036\uffb7\037\uffb7\040\uffb7\041\167\043" +
    "\uffb7\044\uffb7\045\uffb7\001\002\000\036\003\uffbb\017\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\043\uffbb\044\uffbb\045\uffbb\001\002" +
    "\000\004\016\170\001\002\000\030\023\113\024\uffe3\025" +
    "\uffe3\026\034\030\120\036\022\037\040\040\032\043\024" +
    "\044\031\045\035\001\002\000\004\017\172\001\002\000" +
    "\036\003\uffb8\017\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\036\uffb8\037\uffb8\040\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\001\002\000\010\014\054\015\052\023\051" +
    "\001\002\000\004\011\200\001\002\000\006\011\uffbe\020" +
    "\176\001\002\000\010\014\054\015\052\023\051\001\002" +
    "\000\004\011\uffbd\001\002\000\004\013\uffbf\001\002\000" +
    "\034\003\ufff7\017\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\036\ufff7\037\ufff7\040\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\001\002\000\004\017\ufffb\001\002\000\004\017\ufffa" +
    "\001\002\000\004\002\ufffd\001\002\000\010\014\054\015" +
    "\052\023\051\001\002\000\004\011\207\001\002\000\004" +
    "\013\uffc0\001\002\000\010\014\054\015\052\023\071\001" +
    "\002\000\004\011\212\001\002\000\004\016\213\001\002" +
    "\000\030\023\113\024\uffe3\025\uffe3\026\034\030\120\036" +
    "\022\037\040\040\032\043\024\044\031\045\035\001\002" +
    "\000\004\017\215\001\002\000\036\003\uffb2\017\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\043\uffb2\044\uffb2\045\uffb2\001\002\000" +
    "\004\013\217\001\002\000\034\003\ufff8\017\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\027\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000\034\003\ufff1" +
    "\017\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\043\ufff1\044\ufff1\045\ufff1\001\002" +
    "\000\004\023\uffd9\001\002\000\004\023\225\001\002\000" +
    "\004\023\uffd7\001\002\000\004\023\uffd8\001\002\000\004" +
    "\010\226\001\002\000\010\011\uffe7\024\043\025\045\001" +
    "\002\000\004\023\235\001\002\000\004\011\231\001\002" +
    "\000\004\016\232\001\002\000\030\023\113\024\uffe3\025" +
    "\uffe3\026\034\030\120\036\022\037\040\040\032\043\024" +
    "\044\031\045\035\001\002\000\004\017\234\001\002\000" +
    "\036\003\uffe9\017\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\001\002\000\006\011\uffe5\020\236\001\002" +
    "\000\010\011\uffe7\024\043\025\045\001\002\000\004\011" +
    "\uffe8\001\002\000\004\011\uffe6\001\002\000\004\002\001" +
    "\001\002\000\004\042\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\010\012\003\045\004\046\006\001\001\000" +
    "\006\012\003\046\241\001\001\000\002\001\001\000\004" +
    "\015\221\001\001\000\006\034\010\041\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\025\006\024\012" +
    "\017\013\036\017\026\031\020\033\016\035\027\042\035" +
    "\043\015\001\001\000\002\001\001\000\006\011\215\014" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\025\006\202\007\201\012\017\013\036" +
    "\017\026\031\020\033\016\035\027\042\035\043\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\041\014\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\046\001\001\000\002\001\001\000\006\013" +
    "\054\020\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\060\024\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\060\024\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\054\020\072\040\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\073\001\001\000\006\013\054\020" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\113\017\115\026\114\031\111\032" +
    "\106\033\110\035\116\042\120\043\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\142\014\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\113" +
    "\017\115\026\127\027\130\031\111\032\106\033\110\035" +
    "\116\042\120\043\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\054\020\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\132\013\054\020\133\001\001\000\002\001\001\000" +
    "\004\003\135\001\001\000\002\001\001\000\006\013\054" +
    "\020\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\054\020\072" +
    "\040\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\113\017\115\026\163\031\111\032\106\033\110" +
    "\035\116\042\120\043\107\001\001\000\002\001\001\000" +
    "\004\036\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\113\017\115\026\170\031\111\032\106\033" +
    "\110\035\116\042\120\043\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\054\020\174\044\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\054" +
    "\020\174\044\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\054\020\174\044\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\054" +
    "\020\072\040\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\113\017\115\026\213\031\111\032\106" +
    "\033\110\035\116\042\120\043\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\226\022\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\113\017\115\026\232" +
    "\031\111\032\106\033\110\035\116\042\120\043\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\236" +
    "\001\001\000\006\014\226\022\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
        
        private Lexic lexic;

        public Parser(Lexic l, java_cup.runtime.SymbolFactory sf) {
                super(l, sf);
                this.lexic = l;
        }

        public Parser(Lexic l) {
                this(l, new ComplexSymbolFactory());
        }

        public void logSintacticError(String errorMessage) {
                ErrorLogger.logSintacticError(lexic.getLineColumn(),errorMessage);
        }

        public void logLexicError(String errorMessage) {
                ErrorLogger.logLexicError(lexic.getLineColumn(),errorMessage);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codi EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeCodi start_val = (NodeCodi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codi ::= procedures principal 
            {
              NodeCodi RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeProcedures a = (NodeProcedures)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodePrincipal b = (NodePrincipal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCodi(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codi",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedures ::= decl_funcio procedures 
            {
              NodeProcedures RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_funcio a = (NodeDecl_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeProcedures b = (NodeProcedures)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeProcedures(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedures ::= 
            {
              NodeProcedures RESULT =null;
		 RESULT = new NodeProcedures();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= programa PRINCIPAL EParen DParen EClau sentencies DClau 
            {
              NodePrincipal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodePrincipal(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= 
            {
              NodePrograma RESULT =null;
		 RESULT = new NodePrograma(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencies ::= sentencia sentencies2 
            {
              NodeSentencies RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies2 s2 = (NodeSentencies2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies(s,s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencies2 ::= sentencies 
            {
              NodeSentencies2 RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies2(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencies2 ::= 
            {
              NodeSentencies2 RESULT =null;
		 RESULT = new NodeSentencies2();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= cons decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"decl_variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"varinic2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= bucle 
            {
              NodeSentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle b = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(b,"bucle"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= condicional 
            {
              NodeSentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional c = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(c,"condicional"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= decl_funcio 
            {
              NodeSentencia RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeDecl_funcio df = (NodeDecl_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(df,"decl_funcio"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= crida_funcio PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeCrida_funcio cf = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(cf,"crida_funcio"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(s,"sortida"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(e,"entrada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= error PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= ID 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // crida_funcio ::= ID EParen arg DParen 
            {
              NodeCrida_funcio RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeArg a = (NodeArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeCrida_funcio(name, a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crida_funcio",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arg ::= exprsimpleArg arg2 
            {
              NodeArg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple e = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeArg2 a2 = (NodeArg2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArg(e, a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arg ::= 
            {
              NodeArg RESULT =null;
		 RESULT = new NodeArg(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arg2 ::= COMA arg 
            {
              NodeArg2 RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeArg a = (NodeArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArg2(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arg2 ::= 
            {
              NodeArg2 RESULT =null;
		 RESULT = new NodeArg2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl_funcio ::= FUNCIO tipusf ID EParen param DParen EClau blocf DClau 
            {
              NodeDecl_funcio RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeParam p = (NodeParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf b = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeDecl_funcio(t,name,p,b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcio",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param ::= tipus ID param2 
            {
              NodeParam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam2 p2 = (NodeParam2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam(t, id, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param ::= 
            {
              NodeParam RESULT =null;
		 RESULT = new NodeParam(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param2 ::= COMA param 
            {
              NodeParam2 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam p = (NodeParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam2(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param2 ::= 
            {
              NodeParam2 RESULT =null;
		 RESULT = new NodeParam2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cons ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cons",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cons ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cons",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exprsimple ::= ID 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.id, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exprsimple ::= ENTER 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.ent, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprsimple ::= BOOLEA 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.bool, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprsimple ::= crida_funcio 
            {
              NodeExprsimple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCrida_funcio a = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprsimpleArg ::= ID 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.id, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimpleArg",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprsimpleArg ::= ENTER 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.ent, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimpleArg",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprsimpleArg ::= BOOLEA 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.bool, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimpleArg",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipus ::= ENT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.ENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipus ::= BOOL 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipusf ::= ENT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.ENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipusf ::= BOOL 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipusf ::= BUIT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BUIT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // blocf ::= sentenciaf blocf2 
            {
              NodeBlocf RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf2 b = (NodeBlocf2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf(s,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // blocf2 ::= blocf 
            {
              NodeBlocf2 RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf2(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // blocf2 ::= 
            {
              NodeBlocf2 RESULT =null;
		 RESULT = new NodeBlocf2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaf ::= cons decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"decl_variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaf ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"varinic2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentenciaf ::= bucle 
            {
              NodeSentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle b = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(b,"bucle"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaf ::= condicional 
            {
              NodeSentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional c = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(c,"condicional"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaf ::= retorna 
            {
              NodeSentencia RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeRetorna r = (NodeRetorna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(r,"retorna"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaf ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(s, "sortida"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentenciaf ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(e, "entrada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // retorna ::= RETORNA exprsimple PUNTICOMA 
            {
              NodeRetorna RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple expr = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeRetorna(expr, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorna",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // retorna ::= RETORNA PUNTICOMA 
            {
              NodeRetorna RESULT =null;
		 RESULT = new NodeRetorna(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorna",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // decl_variable ::= tipus ID varinic 
            {
              NodeDecl_Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeVarinic vi = (NodeVarinic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeDecl_Variable(t, id, vi, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // varinic ::= ASSIGN exprsimple 
            {
              NodeVarinic RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // varinic ::= 
            {
              NodeVarinic RESULT =null;
		 RESULT = new NodeVarinic(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varinic2 ::= ID ASSIGN exprsimple 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v1 = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, v1, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varinic2 ::= ID ASSIGN exprcomposta 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprcomposta e = (NodeExprcomposta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, e, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprcomposta ::= exprsimple operador_expr exprsimple 
            {
              NodeExprcomposta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_expr o = (NodeOperador_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple b = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprcomposta(a,o,b,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprcomposta",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_expr ::= SUMA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_expr ::= RESTA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_expr ::= MUL 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_expr ::= DIV 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sortida ::= SORTIDA EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,false,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sortida ::= SORTIDALN EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,true,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // llista_valors ::= exprsimple 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // llista_valors ::= exprsimple COMA llista_valors 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeLlistaValors lv = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v, lv);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // entrada ::= ENTRADA EParen ID DParen 
            {
              NodeEntrada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEntrada(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicional ::= SI EParen condicio DParen EClau blocf DClau condsino 
            {
              NodeCondicional RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodeCondicio a = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeBlocf b = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondsino c = (NodeCondsino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicional(a,b,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicio ::= exprsimple operador_cond exprsimple 
            {
              NodeCondicio RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_cond o = (NodeOperador_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v1 = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(v,o,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicio ::= ID 
            {
              NodeCondicio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condsino ::= SINO EClau blocf DClau 
            {
              NodeCondsino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeCondsino(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condsino ::= 
            {
              NodeCondsino RESULT =null;
		 RESULT = new NodeCondsino(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_cond ::= OLI 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_cond ::= OLO 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_cond ::= IGUAL 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_cond ::= DIFERENT 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bucle ::= MENTRE EParen condicio DParen EClau blocf DClau 
            {
              NodeBucle RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeCondicio c = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf bloc = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(c,bloc,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bucle ::= PER EParen decl_variable PUNTICOMA condicio PUNTICOMA comportamentvl DParen EClau blocf DClau 
            {
              NodeBucle RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodeDecl_Variable decl = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodeCondicio cond = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeComportamentv1 comp = (NodeComportamentv1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf bloc = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(decl,cond,comp,bloc,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comportamentvl ::= ID SUMA SUMA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.INCREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comportamentvl ::= ID RESTA RESTA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.DECREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comportamentvl ::= 
            {
              NodeComportamentv1 RESULT =null;
		 RESULT = new NodeComportamentv1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
