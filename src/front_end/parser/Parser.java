
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front_end.parser;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import front_end.simbols.*;
import front_end.scanner.*;
import errors.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\042\004\000\002\043" +
    "\004\000\002\043\002\000\002\032\011\000\002\036\002" +
    "\000\002\006\004\000\002\007\003\000\002\007\002\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\013\006\000" +
    "\002\013\006\000\002\023\004\000\002\023\002\000\002" +
    "\024\004\000\002\024\002\000\002\012\013\000\002\021" +
    "\005\000\002\021\002\000\002\022\004\000\002\022\002" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\025\004\000\002\026" +
    "\003\000\002\026\002\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\031\005\000\002" +
    "\031\004\000\002\011\005\000\002\016\004\000\002\016" +
    "\004\000\002\016\002\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\002\005\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\037\006\000\002\037\006\000\002\041\003\000\002\041" +
    "\005\000\002\040\006\000\002\033\012\000\002\035\005" +
    "\000\002\035\003\000\002\034\006\000\002\034\002\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\030\011\000\002\030\015\000\002\027" +
    "\005\000\002\027\005\000\002\027\002\000\002\044\006" +
    "\000\002\044\006\000\002\045\004\000\002\045\005\000" +
    "\002\046\006\000\002\046\004\000\002\047\004\000\002" +
    "\050\005\000\002\050\006\000\002\051\006\000\002\052" +
    "\005\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\026\006\041\ufffe\001\002\000\006\026" +
    "\006\041\ufffe\001\002\000\004\002\302\001\002\000\010" +
    "\024\262\025\265\030\264\001\002\000\004\041\ufffc\001" +
    "\002\000\004\041\012\001\002\000\004\002\000\001\002" +
    "\000\004\010\013\001\002\000\004\011\014\001\002\000" +
    "\004\016\015\001\002\000\030\003\035\023\023\024\043" +
    "\025\040\026\006\035\022\036\044\037\034\042\024\043" +
    "\033\044\036\001\002\000\004\013\261\001\002\000\032" +
    "\003\ufff4\017\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\042\ufff4\043\ufff4\044\ufff4\001\002" +
    "\000\032\003\ufff6\017\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\001\002\000\004\013\260\001\002\000\004\010\252\001" +
    "\002\000\040\003\uffed\010\060\012\134\017\uffed\021\242" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\035\uffed\036\uffed\037" +
    "\uffed\042\uffed\043\uffed\044\uffed\001\002\000\004\010\236" +
    "\001\002\000\004\013\235\001\002\000\004\017\234\001" +
    "\002\000\032\003\035\017\ufff9\023\023\024\043\025\040" +
    "\026\006\035\022\036\044\037\034\042\024\043\033\044" +
    "\036\001\002\000\032\003\ufff5\017\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\035\ufff5\036\ufff5\037\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\001\002\000\004\013\231\001\002\000\006" +
    "\021\204\023\050\001\002\000\004\010\176\001\002\000" +
    "\004\010\163\001\002\000\004\013\162\001\002\000\004" +
    "\010\157\001\002\000\004\013\156\001\002\000\006\021" +
    "\uffdd\023\uffdd\001\002\000\004\013\155\001\002\000\004" +
    "\013\154\001\002\000\006\021\uffde\023\uffde\001\002\000" +
    "\004\010\045\001\002\000\006\024\043\025\040\001\002" +
    "\000\004\013\072\001\002\000\004\023\050\001\002\000" +
    "\006\012\052\013\uffca\001\002\000\004\013\uffcd\001\002" +
    "\000\010\014\056\015\055\023\053\001\002\000\016\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\060\013\uffe1\001\002" +
    "\000\004\013\uffcc\001\002\000\034\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\013\uffdf\017\uffdf\020\uffdf\022\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002\000\034\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013\uffe0\017\uffe0" +
    "\020\uffe0\022\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\001" +
    "\002\000\004\013\uffcb\001\002\000\014\003\063\011\uffe9" +
    "\014\056\015\055\023\061\001\002\000\014\011\uffe1\013" +
    "\uffe1\017\uffe1\020\uffe1\022\uffe1\001\002\000\004\011\071" +
    "\001\002\000\004\011\070\001\002\000\006\011\uffe7\020" +
    "\065\001\002\000\012\011\uffe9\014\056\015\055\023\061" +
    "\001\002\000\004\011\uffea\001\002\000\004\011\uffe8\001" +
    "\002\000\004\013\uffeb\001\002\000\004\013\uffec\001\002" +
    "\000\010\014\056\015\055\023\073\001\002\000\016\011" +
    "\uffba\013\uffba\031\uffe1\032\uffe1\033\uffe1\034\uffe1\001\002" +
    "\000\004\013\104\001\002\000\012\031\077\032\101\033" +
    "\100\034\102\001\002\000\010\014\056\015\055\023\061" +
    "\001\002\000\010\014\uffb5\015\uffb5\023\uffb5\001\002\000" +
    "\010\014\uffb7\015\uffb7\023\uffb7\001\002\000\010\014\uffb4" +
    "\015\uffb4\023\uffb4\001\002\000\010\014\uffb6\015\uffb6\023" +
    "\uffb6\001\002\000\006\011\uffbb\013\uffbb\001\002\000\006" +
    "\011\uffaf\023\105\001\002\000\006\004\151\005\150\001" +
    "\002\000\004\011\107\001\002\000\004\016\110\001\002" +
    "\000\026\023\115\024\043\025\040\027\122\035\022\036" +
    "\044\037\034\042\024\043\033\044\036\001\002\000\030" +
    "\017\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\042\uffd2\043\uffd2\044\uffd2\001\002\000\004" +
    "\013\147\001\002\000\030\017\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\027\uffd4\035\uffd4\036\uffd4\037\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\001\002\000\004\013\146\001\002\000\004\012" +
    "\134\001\002\000\030\017\uffd7\023\115\024\043\025\040" +
    "\027\122\035\022\036\044\037\034\042\024\043\033\044" +
    "\036\001\002\000\004\017\131\001\002\000\004\013\130" +
    "\001\002\000\030\017\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\001\002\000\012\013\126\014\056\015\055\023\061\001" +
    "\002\000\004\013\124\001\002\000\030\017\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\027\uffd1\035\uffd1\036\uffd1\037\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\001\002\000\004\013\127\001\002" +
    "\000\030\017\uffce\023\uffce\024\uffce\025\uffce\027\uffce\035" +
    "\uffce\036\uffce\037\uffce\042\uffce\043\uffce\044\uffce\001\002" +
    "\000\030\017\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002" +
    "\000\030\017\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\042\uffd5\043\uffd5\044\uffd5\001\002" +
    "\000\034\003\uffb2\017\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\035\uffb2\036\uffb2\037\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\001\002\000\004\017\uffd8\001\002\000\004\017" +
    "\uffd9\001\002\000\010\014\056\015\055\023\053\001\002" +
    "\000\004\013\uffc7\001\002\000\014\004\143\005\140\006" +
    "\142\007\144\013\uffc9\001\002\000\004\013\uffc8\001\002" +
    "\000\010\014\uffc4\015\uffc4\023\uffc4\001\002\000\010\014" +
    "\056\015\055\023\061\001\002\000\010\014\uffc3\015\uffc3" +
    "\023\uffc3\001\002\000\010\014\uffc5\015\uffc5\023\uffc5\001" +
    "\002\000\010\014\uffc2\015\uffc2\023\uffc2\001\002\000\004" +
    "\013\uffc6\001\002\000\030\017\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\001\002\000\030\017\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\027\uffd0\035\uffd0\036\uffd0\037\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\001\002\000\004\005\153\001\002\000\004\004" +
    "\152\001\002\000\004\011\uffb1\001\002\000\004\011\uffb0" +
    "\001\002\000\032\003\ufff3\017\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3\043\ufff3" +
    "\044\ufff3\001\002\000\032\003\ufff2\017\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\035\ufff2\036\ufff2\037\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\001\002\000\032\003\uffef\017\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\035\uffef\036\uffef\037\uffef" +
    "\042\uffef\043\uffef\044\uffef\001\002\000\004\023\160\001" +
    "\002\000\004\011\161\001\002\000\004\013\uffbd\001\002" +
    "\000\032\003\uffee\017\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\035\uffee\036\uffee\037\uffee\042\uffee\043\uffee\044\uffee" +
    "\001\002\000\010\014\056\015\055\023\073\001\002\000" +
    "\004\011\165\001\002\000\004\016\166\001\002\000\026" +
    "\023\115\024\043\025\040\027\122\035\022\036\044\037" +
    "\034\042\024\043\033\044\036\001\002\000\004\017\170" +
    "\001\002\000\036\003\uffb8\017\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\035\uffb8\036\uffb8\037\uffb8\040\172" +
    "\042\uffb8\043\uffb8\044\uffb8\001\002\000\034\003\uffbc\017" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\042\uffbc\043\uffbc\044\uffbc\001\002\000" +
    "\004\016\173\001\002\000\026\023\115\024\043\025\040" +
    "\027\122\035\022\036\044\037\034\042\024\043\033\044" +
    "\036\001\002\000\004\017\175\001\002\000\034\003\uffb9" +
    "\017\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\042\uffb9\043\uffb9\044\uffb9\001\002" +
    "\000\010\014\056\015\055\023\061\001\002\000\010\011" +
    "\uffbf\017\uffbf\020\202\001\002\000\004\011\201\001\002" +
    "\000\004\013\uffc0\001\002\000\010\014\056\015\055\023" +
    "\061\001\002\000\006\011\uffbe\017\uffbe\001\002\000\004" +
    "\022\230\001\002\000\006\021\207\023\206\001\002\000" +
    "\006\012\213\013\212\001\002\000\004\022\210\001\002" +
    "\000\006\021\uffab\023\uffab\001\002\000\004\013\uffae\001" +
    "\002\000\004\013\uffad\001\002\000\006\016\214\045\215" +
    "\001\002\000\010\014\056\015\055\023\061\001\002\000" +
    "\004\021\220\001\002\000\004\013\uffa9\001\002\000\006" +
    "\013\uffa8\021\223\001\002\000\010\014\056\015\055\023" +
    "\061\001\002\000\004\022\222\001\002\000\006\013\uffa7" +
    "\021\uffa7\001\002\000\010\014\056\015\055\023\061\001" +
    "\002\000\004\022\225\001\002\000\006\013\uffa6\021\uffa6" +
    "\001\002\000\004\017\227\001\002\000\004\013\uffaa\001" +
    "\002\000\006\021\uffac\023\uffac\001\002\000\032\003\ufff7" +
    "\017\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002\000\004" +
    "\017\ufffb\001\002\000\004\017\ufffa\001\002\000\004\002" +
    "\ufffd\001\002\000\032\003\ufff0\017\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\001\002\000\010\014\056\015\055\023\061" +
    "\001\002\000\004\011\240\001\002\000\004\013\uffc1\001" +
    "\002\000\006\012\246\021\245\001\002\000\010\014\056" +
    "\015\055\023\061\001\002\000\004\022\244\001\002\000" +
    "\006\012\uffa4\021\uffa4\001\002\000\010\014\056\015\055" +
    "\023\061\001\002\000\010\014\056\015\055\023\061\001" +
    "\002\000\004\013\uffa5\001\002\000\004\022\251\001\002" +
    "\000\006\012\uffa3\021\uffa3\001\002\000\010\014\056\015" +
    "\055\023\073\001\002\000\004\011\254\001\002\000\004" +
    "\016\255\001\002\000\026\023\115\024\043\025\040\027" +
    "\122\035\022\036\044\037\034\042\024\043\033\044\036" +
    "\001\002\000\004\017\257\001\002\000\034\003\uffb3\017" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\042\uffb3\043\uffb3\044\uffb3\001\002\000" +
    "\032\003\ufff8\017\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\042\ufff8\043\ufff8\044\ufff8\001" +
    "\002\000\032\003\ufff1\017\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\035\ufff1\036\ufff1\037\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\001\002\000\004\023\uffdc\001\002\000\004\023\266" +
    "\001\002\000\004\023\uffda\001\002\000\004\023\uffdb\001" +
    "\002\000\004\010\267\001\002\000\010\011\uffe4\024\043" +
    "\025\040\001\002\000\004\023\276\001\002\000\004\011" +
    "\272\001\002\000\004\016\273\001\002\000\026\023\115" +
    "\024\043\025\040\027\122\035\022\036\044\037\034\042" +
    "\024\043\033\044\036\001\002\000\004\017\275\001\002" +
    "\000\034\003\uffe6\017\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\001\002\000\006\011\uffe2\020\277\001\002\000" +
    "\010\011\uffe4\024\043\025\040\001\002\000\004\011\uffe5" +
    "\001\002\000\004\011\uffe3\001\002\000\004\002\001\001" +
    "\002\000\004\041\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\010\012\003\042\004\043\006\001\001\000" +
    "\006\012\003\043\302\001\001\000\002\001\001\000\004" +
    "\015\262\001\001\000\006\032\010\036\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\026\006\025\011" +
    "\020\012\016\013\041\014\031\017\030\030\017\033\027" +
    "\037\040\040\015\044\024\051\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\026" +
    "\006\232\007\231\011\020\012\016\013\041\014\031\017" +
    "\030\030\017\033\027\037\040\040\015\044\024\051\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\045\014\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\050\001\001" +
    "\000\002\001\001\000\006\013\056\020\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\063\023\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\065\001\001\000\006\020\063\023\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\074\035\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\075\001\001" +
    "\000\004\020\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\115\011\113\014\046" +
    "\017\117\025\116\030\112\031\110\033\120\037\122\040" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\115\011\113\014\046\017\117\025\131\026\132\030\112" +
    "\031\110\033\120\037\122\040\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\134\013\136\020\135\001\001\000\002\001\001" +
    "\000\004\003\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\074\035\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\115\011\113\014\046\017\117\025\166\030" +
    "\112\031\110\033\120\037\122\040\111\001\001\000\002" +
    "\001\001\000\004\034\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\115\011\113\014\046\017\117" +
    "\025\173\030\112\031\110\033\120\037\122\040\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\176" +
    "\041\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\176\041\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\215\001\001\000" +
    "\006\020\176\041\225\001\001\000\004\050\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\176\041\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\247\001\001\000\004\020\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\074" +
    "\035\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\115\011\113\014\046\017\117\025\255\030\112" +
    "\031\110\033\120\037\122\040\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\267\021\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\115\011\113\014\046\017\117\025\273" +
    "\030\112\031\110\033\120\037\122\040\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\277\001\001" +
    "\000\006\014\267\021\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
        
        private Lexic lexic;

        public Parser(Lexic l, java_cup.runtime.SymbolFactory sf) {
                super(l, sf);
                this.lexic = l;
        }

        public Parser(Lexic l) {
                this(l, new ComplexSymbolFactory());
        }

        public void logSintacticError(String errorMessage) {
                ErrorLogger.logSintacticError(lexic.getLineColumn(),errorMessage);
        }

        public void logLexicError(String errorMessage) {
                ErrorLogger.logLexicError(lexic.getLineColumn(),errorMessage);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codi EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeCodi start_val = (NodeCodi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codi ::= procedures principal 
            {
              NodeCodi RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeProcedures a = (NodeProcedures)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodePrincipal b = (NodePrincipal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCodi(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codi",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedures ::= decl_funcio procedures 
            {
              NodeProcedures RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_funcio a = (NodeDecl_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeProcedures b = (NodeProcedures)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeProcedures(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedures ::= 
            {
              NodeProcedures RESULT =null;
		 RESULT = new NodeProcedures();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= programa PRINCIPAL EParen DParen EClau sentencies DClau 
            {
              NodePrincipal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodePrincipal(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= 
            {
              NodePrograma RESULT =null;
		 RESULT = new NodePrograma(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencies ::= sentencia sentencies2 
            {
              NodeSentencies RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies2 s2 = (NodeSentencies2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies(s,s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencies2 ::= sentencies 
            {
              NodeSentencies2 RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeSentencies s = (NodeSentencies)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencies2(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencies2 ::= 
            {
              NodeSentencies2 RESULT =null;
		 RESULT = new NodeSentencies2();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencies2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"decl_variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"varinic2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= bucle 
            {
              NodeSentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle b = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(b,"bucle"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= condicional 
            {
              NodeSentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional c = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(c,"condicional"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= decl_funcio 
            {
              NodeSentencia RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeDecl_funcio df = (NodeDecl_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(df,"decl_funcio"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= crida_funcio PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeCrida_funcio cf = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(cf,"crida_funcio"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(s,"sortida"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(e,"entrada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= decl_taula PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_taula a = (NodeDecl_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(a,"decl_taula"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= inic_element_taula PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeInic_element_taula a = (NodeInic_element_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(a,"inic_element_taula"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= error PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= ID 
            {
              NodeSentencia RESULT =null;
		 logLexicError("Sentència invàlida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // crida_funcio ::= ID EParen arg DParen 
            {
              NodeCrida_funcio RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeArg a = (NodeArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeCrida_funcio(name, a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crida_funcio",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // crida_funcio ::= ID EParen error DParen 
            {
              NodeCrida_funcio RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                    logSintacticError("Crida a funció '" + name + "' amb arguments incorrectes."); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crida_funcio",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arg ::= exprsimple arg2 
            {
              NodeArg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple e = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeArg2 a2 = (NodeArg2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArg(e, a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arg ::= 
            {
              NodeArg RESULT =null;
		 RESULT = new NodeArg(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arg2 ::= COMA arg 
            {
              NodeArg2 RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeArg a = (NodeArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeArg2(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arg2 ::= 
            {
              NodeArg2 RESULT =null;
		 RESULT = new NodeArg2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl_funcio ::= FUNCIO tipusf ID EParen param DParen EClau blocf DClau 
            {
              NodeDecl_funcio RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeParam p = (NodeParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf b = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeDecl_funcio(t,name,p,b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcio",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param ::= tipus ID param2 
            {
              NodeParam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam2 p2 = (NodeParam2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam(t, id, p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param ::= 
            {
              NodeParam RESULT =null;
		 RESULT = new NodeParam(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param2 ::= COMA param 
            {
              NodeParam2 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeParam p = (NodeParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeParam2(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param2 ::= 
            {
              NodeParam2 RESULT =null;
		 RESULT = new NodeParam2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exprsimple ::= ID 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.id, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprsimple ::= ENTER 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.ent, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprsimple ::= BOOLEA 
            {
              NodeExprsimple RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprsimple(NodeExprsimple.tipusexpr.bool, v.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprsimple",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipus ::= ENT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.ENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipus ::= BOOL 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipusf ::= ENT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.ENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipusf ::= BOOL 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipusf ::= BUIT 
            {
              NodeTipus RESULT =null;
		 RESULT = new NodeTipus(Tipus.BUIT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipusf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // blocf ::= sentenciaf blocf2 
            {
              NodeBlocf RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSentencia s = (NodeSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf2 b = (NodeBlocf2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf(s,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // blocf2 ::= blocf 
            {
              NodeBlocf2 RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeBlocf2(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // blocf2 ::= 
            {
              NodeBlocf2 RESULT =null;
		 RESULT = new NodeBlocf2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocf2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentenciaf ::= decl_variable PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeDecl_Variable v = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"decl_variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaf ::= varinic2 PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeVarinic2 v = (NodeVarinic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSentencia(v,"varinic2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaf ::= bucle 
            {
              NodeSentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeBucle b = (NodeBucle)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(b,"bucle"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaf ::= condicional 
            {
              NodeSentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondicional c = (NodeCondicional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(c,"condicional"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaf ::= retorna 
            {
              NodeSentencia RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeRetorna r = (NodeRetorna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeSentencia(r,"retorna"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentenciaf ::= sortida PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeSortida s = (NodeSortida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(s, "sortida"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaf ::= entrada PUNTICOMA 
            {
              NodeSentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeEntrada e = (NodeEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NodeSentencia(e, "entrada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // retorna ::= RETORNA exprsimple PUNTICOMA 
            {
              NodeRetorna RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple expr = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeRetorna(expr, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorna",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // retorna ::= RETORNA PUNTICOMA 
            {
              NodeRetorna RESULT =null;
		 RESULT = new NodeRetorna(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorna",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decl_variable ::= tipus ID varinic 
            {
              NodeDecl_Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeTipus t = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeVarinic vi = (NodeVarinic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeDecl_Variable(t, id, vi, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varinic ::= ASSIGN exprsimple 
            {
              NodeVarinic RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varinic ::= ASSIGN crida_funcio 
            {
              NodeVarinic RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCrida_funcio c = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // varinic ::= 
            {
              NodeVarinic RESULT =null;
		 RESULT = new NodeVarinic(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // varinic2 ::= ID ASSIGN exprsimple 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v1 = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, v1, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // varinic2 ::= ID ASSIGN crida_funcio 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCrida_funcio c = (NodeCrida_funcio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, c, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varinic2 ::= ID ASSIGN exprcomposta 
            {
              NodeVarinic2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprcomposta e = (NodeExprcomposta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeVarinic2(v, e, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinic2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprcomposta ::= exprsimple operador_expr exprsimple 
            {
              NodeExprcomposta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_expr o = (NodeOperador_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple b = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeExprcomposta(a,o,b,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprcomposta",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_expr ::= SUMA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_expr ::= RESTA 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_expr ::= MUL 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_expr ::= DIV 
            {
              NodeOperador_expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_expr(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sortida ::= SORTIDA EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,false,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sortida ::= SORTIDALN EParen llista_valors DParen 
            {
              NodeSortida RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors v = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeSortida(v,true,lexic.getLineColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortida",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llista_valors ::= exprsimple 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // llista_valors ::= exprsimple COMA llista_valors 
            {
              NodeLlistaValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeLlistaValors lv = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLlistaValors(v, lv);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llista_valors",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // entrada ::= ENTRADA EParen ID DParen 
            {
              NodeEntrada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEntrada(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicional ::= SI EParen condicio DParen EClau blocf DClau condsino 
            {
              NodeCondicional RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodeCondicio a = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeBlocf b = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeCondsino c = (NodeCondsino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicional(a,b,c,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicio ::= exprsimple operador_cond exprsimple 
            {
              NodeCondicio RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeExprsimple v = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOperador_cond o = (NodeOperador_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple v1 = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(v,o,v1,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicio ::= ID 
            {
              NodeCondicio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeCondicio(id,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condsino ::= SINO EClau blocf DClau 
            {
              NodeCondsino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf a = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeCondsino(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condsino ::= 
            {
              NodeCondsino RESULT =null;
		 RESULT = new NodeCondsino(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condsino",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_cond ::= OLI 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_cond ::= OLO 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_cond ::= IGUAL 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_cond ::= DIFERENT 
            {
              NodeOperador_cond RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeOperador_cond(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bucle ::= MENTRE EParen condicio DParen EClau blocf DClau 
            {
              NodeBucle RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeCondicio c = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf bloc = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(c,bloc,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bucle ::= PER EParen decl_variable PUNTICOMA condicio PUNTICOMA comportamentvl DParen EClau blocf DClau 
            {
              NodeBucle RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodeDecl_Variable decl = (NodeDecl_Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodeCondicio cond = (NodeCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodeComportamentv1 comp = (NodeComportamentv1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeBlocf bloc = (NodeBlocf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeBucle(decl,cond,comp,bloc,lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comportamentvl ::= ID SUMA SUMA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.INCREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comportamentvl ::= ID RESTA RESTA 
            {
              NodeComportamentv1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeComportamentv1(v, Comportament.DECREMENT, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comportamentvl ::= 
            {
              NodeComportamentv1 RESULT =null;
		 RESULT = new NodeComportamentv1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comportamentvl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decl_taula ::= tipus dimensions_taula ID inicialitzacio_taula 
            {
              NodeDecl_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeTipus a = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeDimensions_taula b = (NodeDimensions_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeInicialitzacio_taula d = (NodeInicialitzacio_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeDecl_taula(a, b, c, d, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_taula",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // decl_taula ::= tipus dimensions_taula ID PUNTICOMA 
            {
              NodeDecl_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeTipus a = (NodeTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeDimensions_taula b = (NodeDimensions_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeDecl_taula(a, b, c, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_taula",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dimensions_taula ::= EClaudator DClaudator 
            {
              NodeDimensions_taula RESULT =null;
		 RESULT = new NodeDimensions_taula(null, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensions_taula",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dimensions_taula ::= dimensions_taula EClaudator DClaudator 
            {
              NodeDimensions_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeDimensions_taula a = (NodeDimensions_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodeDimensions_taula(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensions_taula",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inicialitzacio_taula ::= ASSIGN EClau llista_valors DClau 
            {
              NodeInicialitzacio_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeLlistaValors a = (NodeLlistaValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeInicialitzacio_taula(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicialitzacio_taula",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // inicialitzacio_taula ::= ASSIGN assignacio_memoria 
            {
              NodeInicialitzacio_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeAssignacio_memoria a = (NodeAssignacio_memoria)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeInicialitzacio_taula(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicialitzacio_taula",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignacio_memoria ::= RESERVA especificacio_dimensio 
            {
              NodeAssignacio_memoria RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeEspecificacio_dimensio a = (NodeEspecificacio_dimensio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeAssignacio_memoria(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignacio_memoria",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // especificacio_dimensio ::= EClaudator exprsimple DClaudator 
            {
              NodeEspecificacio_dimensio RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEspecificacio_dimensio(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificacio_dimensio",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // especificacio_dimensio ::= especificacio_dimensio EClaudator exprsimple DClaudator 
            {
              NodeEspecificacio_dimensio RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeEspecificacio_dimensio a = (NodeEspecificacio_dimensio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple b = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeEspecificacio_dimensio(a, b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificacio_dimensio",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // inic_element_taula ::= ID indexos_taula ASSIGN exprsimple 
            {
              NodeInic_element_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeIndexos_taula a = (NodeIndexos_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeExprsimple b = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeInic_element_taula(a, b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inic_element_taula",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // indexos_taula ::= EClaudator exprsimple DClaudator 
            {
              NodeIndexos_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple a = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeIndexos_taula(a, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexos_taula",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // indexos_taula ::= indexos_taula EClaudator exprsimple DClaudator 
            {
              NodeIndexos_taula RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodeIndexos_taula a = (NodeIndexos_taula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeExprsimple b = (NodeExprsimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeIndexos_taula(a, b, lexic.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexos_taula",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
